/*
Sniperkit-Bot
- Status: analyzed
*/

// Code generated by go-bindata.
// sources:
// schema/sql/schema.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSqlSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x41\x6b\xfa\x40\x10\xc5\xcf\xe6\x53\x0c\x39\x45\xf0\xf0\xe7\x7f\xed\xc9\xb6\xa9\x84\xb6\xb1\x68\x0a\x4a\x29\xcb\x36\x3b\x92\xa1\x66\x37\xec\x4e\x8a\xed\xa7\x2f\x09\x6a\xd6\xa0\x41\x68\x8e\x79\x8f\x37\x6f\xe6\xb7\x77\x8b\x78\x9a\xc5\x90\x4d\x6f\x9f\x62\x48\x1e\x20\x9d\x67\x10\xaf\x92\x65\xb6\x04\x8b\x95\x71\xc4\xc6\x12\x3a\x88\x82\x11\x29\xa8\x6b\x52\xf0\xb2\x48\x9e\xa7\x8b\x35\x3c\xc6\xeb\x49\x30\xca\x2d\x4a\x46\x25\x24\x03\x53\x89\x8e\x65\x59\xf1\xcf\x24\x80\xfd\x57\x57\x6a\x50\x47\xad\x2a\x43\x9a\x1d\x30\xee\xf8\xed\xbd\x53\x1c\x4b\xae\x1d\x7c\x49\x9b\x17\xd2\x46\xff\xff\x8d\x3b\x6d\x83\x9c\x17\x03\xa9\xad\x2e\xd0\x5a\x63\x2f\x7a\xb6\xd2\xb1\xc8\x4d\x59\x12\x5f\xf4\x90\x13\x1b\x63\x3f\xe1\xc3\x98\x2d\x4a\x1d\x8c\x6f\x82\x60\x7f\xb2\x24\xbd\x8f\x57\xbd\x93\x91\xda\x09\xff\x6c\xa2\xdb\xce\x68\x08\x7d\x29\x84\xd7\x65\x92\xce\x60\x96\xa4\x10\x85\x47\x5f\xe8\x4d\x18\x84\xf2\x2d\x2c\x6e\xd0\xa2\xce\x5b\x3a\xc7\xc2\xe7\x20\x1d\xc4\xbf\xb2\xd2\xb2\xc4\x16\x53\xf7\xcb\xeb\x73\x18\xed\xf5\xf2\x17\x8e\x48\x79\x00\x0b\xe9\x8a\x5e\x14\x69\xe2\x7e\xba\x31\x67\x1e\xc6\x71\x80\x68\x5a\xfa\x55\xaf\xe3\x73\xa8\x27\x4e\xcb\xcf\x53\x8f\x90\x7f\xde\x10\xa2\xf0\xc4\xda\x40\xba\x7e\x4a\xbb\xd7\x60\x78\xe3\x68\x32\x7f\x03\x00\x00\xff\xff\x83\x67\x09\x0c\x8d\x03\x00\x00")

func schemaSqlSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSqlSchemaSql,
		"schema/sql/schema.sql",
	)
}

func schemaSqlSchemaSql() (*asset, error) {
	bytes, err := schemaSqlSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/sql/schema.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/sql/schema.sql": schemaSqlSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"sql": &bintree{nil, map[string]*bintree{
			"schema.sql": &bintree{schemaSqlSchemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
